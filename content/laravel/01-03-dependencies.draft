---
utid: 1000-01-03
chapter: 01
chaptername: فصل اول: پیش به سوی صفر
part: 03
title: وابستگی‌ها و اتصالات
_index: dependencies
---



در [مقدمه](/laravel-0-to-60/chapter00/lesson01/preface/) گفتیم و از نام کتاب هم پیداست که فرآیند آموزش از نقطه‌ی صفر شروع می‌شود و لازم نیست چیزی درباره‌ی لاراول بدانید.

اما به پیش‌نیازهایی هم اشاره کردیم که قرار شد در هر کدام از درس‌های فصل یک کتاب، یکی از آن‌ها را بشکافیم. 

این درس، به مفهوم وابستگی‌ها و اتصالات در برنامه‌نویسی اختصاص دارد.

##### اگر با موضوع این درس، یا هر یک از درس‌های فصل یکم کتاب آشنا هستید، بهتر است وقت خود را تلف نکنید و بدون مطالعه، از آن عبور کنید. فصل‌های بعدی به مطالب این فصل وابسته نیستند.

# تعریف ساده

مسأله بسیار ساده‌تر از چیزی است که کتاب‌ها می‌نویسند و منابع می‌گویند.

وقتی کلاس `الف` برای انجام کار خودش از کار دیگری که در کلاس `ب` انجام شده استفاده می‌کند، کلاس `الف` به کلاس `ب` «وابسته» است و کلاس `ب`، یک «وابستگی» است.

به رابطه‌ی نیازمندی کلاس‌ها به یکدیگر «اتصال» (Coupling) می‌گویند. 

توجه کنید که وابستگی و اتصال دو کلاس به یکدیگر، رابطه‌ای جهت‌دار است. یعنی اگر کلاس `الف` به کلاس `ب` متصل شده، دلیل بر آن نیست که کلاس `ب` نیز متقابلاً با کلاس `الف` اتصال داشته باشد.

### مثال ساده

فرض کنید کلاسی برای مدیریت اطلاعات خلبان‌ها داشته باشیم و کلاس دیگری برای مدیریت اطلاعات مأموریت‌ها. در مثال زیر، کلاس `Pilot` یک وابستگی است و کلاس `Mission` به آن وابسته است.

```php
<?php

class Pilot
{
    private $name;
  
    public function __construct($name)
    {
        $this->name = $name;
    }
}

class Mission
{
    private $mission_number;
  
    public function __construct($mission_number, $pilot_name)
    {
        $this->mission_number = $mission_number;
        $this->pilot = new Pilot($name);
    }
}
```

و همان طور که گفتیم، اتصال دو کلاس رابطه‌ای دوطرفه نیست. چنانچه می‌بینید، کلاس `Pilot` هیچ وابستگی و نیازی به کلاس `Mission` ندارد.

# استحکام اتصالات

اتصال بین دو کلاس (یا دو ماژول)، می‌تواند سست (Loose) یا محکم (tight) باشد. 

این تفکیک مطلق نیست و باید شکل طیفی پیوسته به آن نگاه کنید. 



